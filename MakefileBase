NVCC:=nvcc
CC:=g++

SM=70
graph_ft_load=1

ifeq ($(debug), 1)
	CUFLAGS = -g -G -Ddebug --std=c++14 --gpu-architecture=compute_${SM} --gpu-code=sm_${SM},compute_${SM} -Xcompiler -O3 -Xcompiler -fopenmp
	CFLAGS = -g -Ddebug -std=c++14 -Wextra -Wall
else
	CUFLAGS = -O3 -Xptxas -O3 --std=c++14 --gpu-architecture=compute_${SM} --gpu-code=sm_${SM},compute_${SM} -Xcompiler -O3 -Xcompiler -fopenmp
	CFLAGS = -O3 -std=c++14 -Wextra -Wall
endif

ifeq ($(graph_ft_load),1)
	CUFLAGS += -DGRAPH_FT_LOAD=4
	CFLAGS  += -DGRAPH_FT_LOAD=4
else
	CUFLAGS += -DGRAPH_FT_LOAD=2
	CFLAGS  += -DGRAPH_FT_LOAD=2
endif

ifeq ($(bit),32)
	CUFLAGS += -DUSE_32BIT
	CFLAGS  += -DUSE_32BIT
else ifeq ($(bit),64)
	CUFLAGS += -DUSE_64BIT
	CFLAGS  += -DUSE_64BIT
else
	CUFLAGS += -DUSE_64BIT
	CFLAGS  += DUSE_64BIT
endif

EXE:= run

all: ${EXE}

graph.o: graph.cpp graph.hpp types.hpp
	${NVCC} -x cu ${CUFLAGS} -dc -c $< -o $@

graph_gpu.o: graph_gpu.cpp graph_gpu.hpp cuda_wrapper.hpp types.hpp
	${NVCC} -x cu ${CUFLAGS} -dc -c $< -o $@

louvain_cuda.o: louvain_gpu.cpp louvain_gpu.hpp cuda_wrapper.hpp types.hpp
	${NVCC} -x cu ${CUFLAGS} -dc -c $< -o $@

main.o: main.cpp graph.hpp graph_gpu.hpp cuda_wrapper.hpp types.hpp louvain_gpu.hpp
	${NVCC} -x cu ${CUFLAGS} -dc -c $< -o $@

graph_cuda.o: graph_cuda.cu graph_cuda.hpp graph.cpp graph.hpp
	${NVCC} ${CUFLAGS} -c $< -o $@

heap.o : heap.cpp heap.hpp types.hpp
	${NVCC} -x cu ${CUFLAGS} -dc -c $< -o $@

${EXE}: graph_gpu.o graph_cuda.o graph.o louvain_cuda.o main.o heap.o
	${NVCC} ${CUFLAGS} $^ -o $@

clean:
	rm -f *.o ${EXE}
